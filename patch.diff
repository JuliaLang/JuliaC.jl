diff --git a/Project.toml b/Project.toml
index dc314ea..474bb8e 100644
--- a/Project.toml
+++ b/Project.toml
@@ -10,7 +10,7 @@ PackageCompiler = "9b87118b-4619-50d2-8e1e-99f35a4d4d9d"
 Pkg = "44cfe95a-1eb2-52ea-b672-e2afdf69b78f"
 
 [compat]
-LazyArtifacts = "1.11.0"
-Libdl = "1.11.0"
+LazyArtifacts = "1"
+Libdl = "1"
 PackageCompiler = "2.2.1"
-Pkg = "1.13.0"
+Pkg = "1"
diff --git a/src/JuliaC.jl b/src/JuliaC.jl
index f4e5e17..5821250 100644
--- a/src/JuliaC.jl
+++ b/src/JuliaC.jl
@@ -10,6 +10,7 @@ Base.@kwdef mutable struct ImageRecipe
     cpu_target::Union{String, Nothing} = nothing
     output_type::String = ""
     enable_trim::Bool = false
+    trim_mode::Union{String, Nothing} = nothing
     add_ccallables::Bool = false
     # build options
     file::String = ""
@@ -17,6 +18,10 @@ Base.@kwdef mutable struct ImageRecipe
     project::String = ""
     img_path::String = ""
     verbose::Bool = false
+    # C shim sources to compile and link into the final artifact
+    c_sources::Vector{String} = String[]
+    cflags::Vector{String} = String[]
+    extra_objects::Vector{String} = String[]
 end
 
 Base.@kwdef mutable struct LinkRecipe
diff --git a/src/bundling.jl b/src/bundling.jl
index bee0b7c..a5ce2a0 100644
--- a/src/bundling.jl
+++ b/src/bundling.jl
@@ -12,6 +12,13 @@ function bundle_products(recipe::BundleRecipe)
     ctx2 = PackageCompiler.create_pkg_context(recipe.link_recipe.image_recipe.project)
     stdlibs = unique(vcat(PackageCompiler.gather_stdlibs_project(ctx2), PackageCompiler.stdlibs_in_sysimage()))
     PackageCompiler.bundle_julia_libraries(recipe.output_dir, stdlibs)
-
-    mv(recipe.link_recipe.outname, joinpath(recipe.output_dir, recipe.link_recipe.outname))
+    PackageCompiler.bundle_artifacts(ctx2, recipe.output_dir; include_lazy_artifacts=false) # Lazy artifacts
+    # Move the output library into the output_dir if it is not already there
+    outname = recipe.link_recipe.outname
+    dest = isabspath(outname) ? joinpath(recipe.output_dir, basename(outname)) : joinpath(recipe.output_dir, outname)
+    if abspath(outname) != abspath(dest)
+        mkpath(dirname(dest))
+        mv(outname, dest; force=true)
+        recipe.link_recipe.outname = dest
+    end
 end
\ No newline at end of file
diff --git a/src/compiling.jl b/src/compiling.jl
index 6677363..4775ed9 100644
--- a/src/compiling.jl
+++ b/src/compiling.jl
@@ -6,6 +6,13 @@ function compile_products(recipe::ImageRecipe)
     if recipe.enable_trim
         push!(strip_args, "--strip-ir")
         push!(strip_args, "--strip-metadata")
+        # Detect trim support on 1.12 prereleases as well
+        supports_trim = (VERSION.major > 1 || VERSION.minor >= 12) || (:trim in fieldnames(typeof(Base.JLOptions())))
+        if supports_trim && recipe.trim_mode !== nothing
+            # On 1.12 prereleases, --trim requires --experimental; harmless on stable
+            push!(strip_args, "--experimental")
+            push!(strip_args, "--trim=$(recipe.trim_mode)")
+        end
     end
     if recipe.output_type == "--output-bc"
         image_arg = "--output-bc"
@@ -13,17 +20,73 @@ function compile_products(recipe::ImageRecipe)
         image_arg = "--output-o"
     end
     julia_cmd = `$(Base.julia_cmd(;cpu_target=recipe.cpu_target)) --startup-file=no --history-file=no`
+    # Ensure the app project is instantiated and precompiled
+    project_arg = recipe.project == "" ? Base.active_project() : recipe.project
+    inst_cmd = addenv(`$(julia_cmd) --project=$project_arg -e "using Pkg; Pkg.instantiate(); Pkg.precompile()"`)
+    recipe.verbose && println("Running: $inst_cmd")
+    if !success(pipeline(inst_cmd; stdout, stderr))
+        println(stderr, "\nError encountered during instantiate/precompile of app project.")
+        exit(1)
+    end
     # Compile the Julia code
     if recipe.img_path == ""
         tmpdir = mktempdir()
         recipe.img_path = joinpath(tmpdir, "image.o.a")
     end
     project_arg = recipe.project == "" ? Base.active_project() : recipe.project
-    cmd = addenv(`$(julia_cmd) --project=$project_arg $(image_arg) $(recipe.img_path) --output-incremental=no $strip_args $(recipe.julia_args) $(joinpath(@__DIR__,"scripts/juliac-buildscript.jl")) $(abspath(recipe.file)) $(recipe.output_type) $(recipe.add_ccallables)`, "OPENBLAS_NUM_THREADS" => 1, "JULIA_NUM_THREADS" => 1)
+    # Build command incrementally to guarantee proper token separation
+    cmd = julia_cmd
+    cmd = `$cmd --project=$project_arg $(image_arg) $(recipe.img_path) --output-incremental=no`
+    for a in strip_args
+        cmd = `$cmd $a`
+    end
+    for a in recipe.julia_args
+        cmd = `$cmd $a`
+    end
+    cmd = `$cmd $(joinpath(@__DIR__, "scripts", "juliac-buildscript.jl")) $(abspath(recipe.file)) $(recipe.output_type) $(string(recipe.add_ccallables))`
+    cmd = addenv(cmd, "OPENBLAS_NUM_THREADS" => 1, "JULIA_NUM_THREADS" => 1)
     recipe.verbose && println("Running: $cmd")
     if !success(pipeline(cmd; stdout, stderr))
         println(stderr, "\nFailed to compile $(recipe.file)")
         exit(1)
     end
+
+    # If C shim sources are provided, compile them to objects for linking stage
+    if !isempty(recipe.c_sources)
+        compiler_cmd = JuliaC.get_compiler_cmd()
+        # Ensure include flags are passed as separate tokens
+        default_cflags = Base.shell_split(JuliaC.JuliaConfig.cflags(; framework=false))
+        user_cflags = String[]
+        for cf in recipe.cflags
+            if startswith(cf, "-I") && cf != "-I"
+                push!(user_cflags, cf)
+            else
+                append!(user_cflags, split(cf))
+            end
+        end
+        cflags = isempty(user_cflags) ? default_cflags : vcat(default_cflags, user_cflags)
+        new_cflags = ``
+        for flag in cflags
+            new_cflags = `$new_cflags $flag`
+        end
+        @show new_cflags
+        for csrc in recipe.c_sources
+            obj = replace(csrc, ".c" => ".o")
+            try
+                # Build command incrementally to avoid argument concatenation issues
+                cmdc = compiler_cmd
+                for cf in cflags
+                    cmdc = `$cmdc $cf`
+                end
+                cmdc = `$cmdc -c $(csrc) -o $(obj)`
+                recipe.verbose && println("Running: $cmdc")
+                run(cmdc)
+                push!(recipe.extra_objects, obj)
+            catch e
+                println("\nC shim compilation failed: ", e)
+                exit(1)
+            end
+        end
+    end
 end
 
diff --git a/src/linking.jl b/src/linking.jl
index 5e889d7..820a657 100644
--- a/src/linking.jl
+++ b/src/linking.jl
@@ -80,12 +80,13 @@ function link_products(recipe::LinkRecipe)
     compiler_cmd = get_compiler_cmd()
     allflags = Base.shell_split(JuliaConfig.allflags(; framework=false, rpath=false))
     try
+        mkpath(dirname(recipe.outname))
         if image_recipe.output_type == "--output-lib"
-            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -shared -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path)  -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE)  $(julia_libs)`
+            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -shared -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path) $(image_recipe.extra_objects...) -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE)  $(julia_libs)`
         elseif image_recipe.output_type == "--output-sysimage"
-            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -shared -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path)  -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE) $(julia_libs)`
+            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -shared -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path) $(image_recipe.extra_objects...) -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE) $(julia_libs)`
         else
-            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path) -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE)  $(julia_libs)`
+            cmd2 = `$(compiler_cmd) $(allflags) $(rpath_str) -o $(recipe.outname) -Wl,$(Base.Linking.WHOLE_ARCHIVE) $(image_recipe.img_path) $(image_recipe.extra_objects...) -Wl,$(Base.Linking.NO_WHOLE_ARCHIVE)  $(julia_libs)`
         end
         image_recipe.verbose && println("Running: $cmd2")
         run(cmd2)
diff --git a/src/scripts/juliac-trim-base.jl b/src/scripts/juliac-trim-base.jl
index 96fed77..689a558 100644
--- a/src/scripts/juliac-trim-base.jl
+++ b/src/scripts/juliac-trim-base.jl
@@ -104,6 +104,12 @@ end
     mapreduce_empty(::typeof(identity), op::F, T) where {F} = reduce_empty(op, T)
     mapreduce_empty(::typeof(abs), op::F, T) where {F}     = abs(reduce_empty(op, T))
     mapreduce_empty(::typeof(abs2), op::F, T) where {F}    = abs2(reduce_empty(op, T))
+    @noinline function throw_eachindex_mismatch_indices(::IndexLinear, inds...)
+        throw(DimensionMismatch("all inputs to eachindex must have the same indices"))
+    end
+    @noinline function throw_eachindex_mismatch_indices(::IndexCartesian, inds...)
+        throw(DimensionMismatch("all inputs to eachindex must have the same axes"))
+    end
 end
 @eval Base.Sys begin
     __init_build() = nothing
@@ -159,3 +165,7 @@ end
         return Time(h, m, s, ms)
     end
 end
+
+@eval Base.CoreLogging begin
+    @inline current_logger_for_env(std_level::LogLevel, group, _module) = nothing
+end

